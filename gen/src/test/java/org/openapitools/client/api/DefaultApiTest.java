/*
 * Chatty Car Ride Sharing Service Gateway API
 * API for the gateway service of Chatty Car, the ride sharing app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Credentials;
import org.openapitools.client.model.NewTrip;
import org.openapitools.client.model.NewUser;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.PassengerTrips;
import org.openapitools.client.model.Passengers;
import org.openapitools.client.model.Trip;
import org.openapitools.client.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Connect user and retrieve authentication JWT token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authPostTest() throws ApiException {
        Credentials credentials = null;
        String response = api.authPost(credentials);

        // TODO: test validations
    }
    
    /**
     * Get list of trips with optional search queries
     *
     * Limits list to 20 trips, ordered by latest created if not otherwise specified. Always filters out trips without any available seating left. Departure date query will filter only trips departing on the same date. Origin query (lat+lon) will order by distance with specified origin position. Destination query (lat+lon) will order by distance with specified destination position. Both origin and destination queries will order by sum of distances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsGetTest() throws ApiException {
        BigDecimal originLon = null;
        String departureDate = null;
        BigDecimal originLat = null;
        BigDecimal destinationLat = null;
        BigDecimal destinationLon = null;
        List<Trip> response = api.tripsGet(originLon, departureDate, originLat, destinationLat, destinationLon);

        // TODO: test validations
    }
    
    /**
     * Delete trip
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsIdDeleteTest() throws ApiException {
        Integer id = null;
        api.tripsIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get trip information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsIdGetTest() throws ApiException {
        Integer id = null;
        Trip response = api.tripsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Get list of passengers of a trip, with pending, accepted and refused status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsIdPassengersGetTest() throws ApiException {
        Integer id = null;
        Passengers response = api.tripsIdPassengersGet(id);

        // TODO: test validations
    }
    
    /**
     * Create a trip
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsPostTest() throws ApiException {
        NewTrip newTrip = null;
        Trip response = api.tripsPost(newTrip);

        // TODO: test validations
    }
    
    /**
     * Remove user from passengers of a trip
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsTripIdPassengersUserIdDeleteTest() throws ApiException {
        Integer tripId = null;
        Integer userId = null;
        api.tripsTripIdPassengersUserIdDelete(tripId, userId);

        // TODO: test validations
    }
    
    /**
     * Get passenger status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsTripIdPassengersUserIdGetTest() throws ApiException {
        Integer tripId = null;
        Integer userId = null;
        String response = api.tripsTripIdPassengersUserIdGet(tripId, userId);

        // TODO: test validations
    }
    
    /**
     * Add user as passenger to a trip with pending status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsTripIdPassengersUserIdPostTest() throws ApiException {
        Integer tripId = null;
        Integer userId = null;
        api.tripsTripIdPassengersUserIdPost(tripId, userId);

        // TODO: test validations
    }
    
    /**
     * Update passenger status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tripsTripIdPassengersUserIdPutTest() throws ApiException {
        Integer tripId = null;
        Integer userId = null;
        String status = null;
        api.tripsTripIdPassengersUserIdPut(tripId, userId, status);

        // TODO: test validations
    }
    
    /**
     * Get trips where user is the driver with a future departure date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdDriverGetTest() throws ApiException {
        Integer id = null;
        List<Trip> response = api.userIdDriverGet(id);

        // TODO: test validations
    }
    
    /**
     * Delete all notifications of this user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdNotificationsDeleteTest() throws ApiException {
        Integer id = null;
        api.userIdNotificationsDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get user notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdNotificationsGetTest() throws ApiException {
        Integer id = null;
        List<Notification> response = api.userIdNotificationsGet(id);

        // TODO: test validations
    }
    
    /**
     * Get trips where user is a passenger with a future departure date by status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userIdPassengerGetTest() throws ApiException {
        Integer id = null;
        PassengerTrips response = api.userIdPassengerGet(id);

        // TODO: test validations
    }
    
    /**
     * Find user from its email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String email = null;
        User response = api.usersGet(email);

        // TODO: test validations
    }
    
    /**
     * Delete user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdDeleteTest() throws ApiException {
        Integer id = null;
        api.usersIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get user information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdGetTest() throws ApiException {
        Integer id = null;
        User response = api.usersIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update user information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdPutTest() throws ApiException {
        Integer id = null;
        User user = null;
        api.usersIdPut(id, user);

        // TODO: test validations
    }
    
    /**
     * Create a new user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        NewUser newUser = null;
        User response = api.usersPost(newUser);

        // TODO: test validations
    }
    
    /**
     * Update user password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPutTest() throws ApiException {
        Credentials credentials = null;
        api.usersPut(credentials);

        // TODO: test validations
    }
    
}
