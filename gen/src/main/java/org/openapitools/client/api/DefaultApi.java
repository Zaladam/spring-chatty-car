/*
 * Prout Car Ride Sharing Service Gateway API
 * API for the gateway service of Chatty Car, the ride sharing app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.NewTrip;
import org.openapitools.client.model.Passengers;
import org.openapitools.client.model.Trip;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for tripsGet
     * @param originLon Longitude of the starting position (required)
     * @param departureDate Date of departure (optional)
     * @param originLat Latitude of the origin position (optional)
     * @param destinationLat Latitude of the destination position (optional)
     * @param destinationLon Longitude of the destination position (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Both latitude and longitude should be specified for a position query </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent list of trips </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsGetCall(BigDecimal originLon, String departureDate, BigDecimal originLat, BigDecimal destinationLat, BigDecimal destinationLon, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (departureDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure_date", departureDate));
        }

        if (originLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originLat", originLat));
        }

        if (originLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originLon", originLon));
        }

        if (destinationLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationLat", destinationLat));
        }

        if (destinationLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationLon", destinationLon));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsGetValidateBeforeCall(BigDecimal originLon, String departureDate, BigDecimal originLat, BigDecimal destinationLat, BigDecimal destinationLon, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'originLon' is set
        if (originLon == null) {
            throw new ApiException("Missing the required parameter 'originLon' when calling tripsGet(Async)");
        }
        

        okhttp3.Call localVarCall = tripsGetCall(originLon, departureDate, originLat, destinationLat, destinationLon, _callback);
        return localVarCall;

    }

    /**
     * Get list of trips with optional search queries
     * Limits list to 20 trips, ordered by latest created if not otherwise specified. Always filters out trips without any available seating left. Departure date query will filter only trips departing on the same date. Origin query (lat+lon) will order by distance with specified origin position. Destination query (lat+lon) will order by distance with specified destination position. Both origin and destination queries will order by sum of distances.
     * @param originLon Longitude of the starting position (required)
     * @param departureDate Date of departure (optional)
     * @param originLat Latitude of the origin position (optional)
     * @param destinationLat Latitude of the destination position (optional)
     * @param destinationLon Longitude of the destination position (optional)
     * @return List&lt;Trip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Both latitude and longitude should be specified for a position query </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent list of trips </td><td>  -  </td></tr>
     </table>
     */
    public List<Trip> tripsGet(BigDecimal originLon, String departureDate, BigDecimal originLat, BigDecimal destinationLat, BigDecimal destinationLon) throws ApiException {
        ApiResponse<List<Trip>> localVarResp = tripsGetWithHttpInfo(originLon, departureDate, originLat, destinationLat, destinationLon);
        return localVarResp.getData();
    }

    /**
     * Get list of trips with optional search queries
     * Limits list to 20 trips, ordered by latest created if not otherwise specified. Always filters out trips without any available seating left. Departure date query will filter only trips departing on the same date. Origin query (lat+lon) will order by distance with specified origin position. Destination query (lat+lon) will order by distance with specified destination position. Both origin and destination queries will order by sum of distances.
     * @param originLon Longitude of the starting position (required)
     * @param departureDate Date of departure (optional)
     * @param originLat Latitude of the origin position (optional)
     * @param destinationLat Latitude of the destination position (optional)
     * @param destinationLon Longitude of the destination position (optional)
     * @return ApiResponse&lt;List&lt;Trip&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Both latitude and longitude should be specified for a position query </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent list of trips </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Trip>> tripsGetWithHttpInfo(BigDecimal originLon, String departureDate, BigDecimal originLat, BigDecimal destinationLat, BigDecimal destinationLon) throws ApiException {
        okhttp3.Call localVarCall = tripsGetValidateBeforeCall(originLon, departureDate, originLat, destinationLat, destinationLon, null);
        Type localVarReturnType = new TypeToken<List<Trip>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of trips with optional search queries (asynchronously)
     * Limits list to 20 trips, ordered by latest created if not otherwise specified. Always filters out trips without any available seating left. Departure date query will filter only trips departing on the same date. Origin query (lat+lon) will order by distance with specified origin position. Destination query (lat+lon) will order by distance with specified destination position. Both origin and destination queries will order by sum of distances.
     * @param originLon Longitude of the starting position (required)
     * @param departureDate Date of departure (optional)
     * @param originLat Latitude of the origin position (optional)
     * @param destinationLat Latitude of the destination position (optional)
     * @param destinationLon Longitude of the destination position (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Both latitude and longitude should be specified for a position query </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent list of trips </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsGetAsync(BigDecimal originLon, String departureDate, BigDecimal originLat, BigDecimal destinationLat, BigDecimal destinationLon, final ApiCallback<List<Trip>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsGetValidateBeforeCall(originLon, departureDate, originLat, destinationLat, destinationLon, _callback);
        Type localVarReturnType = new TypeToken<List<Trip>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripsIdDelete
     * @param id ID of the trip (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Trip is deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trips/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tripsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = tripsIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete trip
     * 
     * @param id ID of the trip (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Trip is deleted </td><td>  -  </td></tr>
     </table>
     */
    public void tripsIdDelete(Integer id) throws ApiException {
        tripsIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete trip
     * 
     * @param id ID of the trip (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Trip is deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tripsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tripsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete trip (asynchronously)
     * 
     * @param id ID of the trip (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Trip is deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripsIdGet
     * @param id ID of the trip (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent trip information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trips/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tripsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = tripsIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get trip information
     * 
     * @param id ID of the trip (required)
     * @return Trip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent trip information </td><td>  -  </td></tr>
     </table>
     */
    public Trip tripsIdGet(Integer id) throws ApiException {
        ApiResponse<Trip> localVarResp = tripsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get trip information
     * 
     * @param id ID of the trip (required)
     * @return ApiResponse&lt;Trip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent trip information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trip> tripsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tripsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Trip>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get trip information (asynchronously)
     * 
     * @param id ID of the trip (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent trip information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsIdGetAsync(Integer id, final ApiCallback<Trip> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Trip>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripsIdPassengersGet
     * @param id ID of the trip (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Status not in accepted values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent list of passengers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsIdPassengersGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trips/{id}/passengers"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsIdPassengersGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tripsIdPassengersGet(Async)");
        }
        

        okhttp3.Call localVarCall = tripsIdPassengersGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get list of passengers of a trip, with pending, accepted and refused status
     * 
     * @param id ID of the trip (required)
     * @return Passengers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Status not in accepted values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent list of passengers </td><td>  -  </td></tr>
     </table>
     */
    public Passengers tripsIdPassengersGet(Integer id) throws ApiException {
        ApiResponse<Passengers> localVarResp = tripsIdPassengersGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get list of passengers of a trip, with pending, accepted and refused status
     * 
     * @param id ID of the trip (required)
     * @return ApiResponse&lt;Passengers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Status not in accepted values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent list of passengers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Passengers> tripsIdPassengersGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = tripsIdPassengersGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Passengers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of passengers of a trip, with pending, accepted and refused status (asynchronously)
     * 
     * @param id ID of the trip (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Status not in accepted values </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No trip found with this ID </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent list of passengers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsIdPassengersGetAsync(Integer id, final ApiCallback<Passengers> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsIdPassengersGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Passengers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripsPost
     * @param newTrip Information of the trip (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Trip in request is not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Trip is created, sent trip created with its assigned ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsPostCall(NewTrip newTrip, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newTrip;

        // create path and map variables
        String localVarPath = "/trips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsPostValidateBeforeCall(NewTrip newTrip, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = tripsPostCall(newTrip, _callback);
        return localVarCall;

    }

    /**
     * Create a trip
     * 
     * @param newTrip Information of the trip (optional)
     * @return Trip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Trip in request is not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Trip is created, sent trip created with its assigned ID </td><td>  -  </td></tr>
     </table>
     */
    public Trip tripsPost(NewTrip newTrip) throws ApiException {
        ApiResponse<Trip> localVarResp = tripsPostWithHttpInfo(newTrip);
        return localVarResp.getData();
    }

    /**
     * Create a trip
     * 
     * @param newTrip Information of the trip (optional)
     * @return ApiResponse&lt;Trip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Trip in request is not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Trip is created, sent trip created with its assigned ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trip> tripsPostWithHttpInfo(NewTrip newTrip) throws ApiException {
        okhttp3.Call localVarCall = tripsPostValidateBeforeCall(newTrip, null);
        Type localVarReturnType = new TypeToken<Trip>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a trip (asynchronously)
     * 
     * @param newTrip Information of the trip (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Trip in request is not correct </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Trip is created, sent trip created with its assigned ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsPostAsync(NewTrip newTrip, final ApiCallback<Trip> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsPostValidateBeforeCall(newTrip, _callback);
        Type localVarReturnType = new TypeToken<Trip>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripsTripIdPassengersUserIdDelete
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is not a passenger </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Used removed from passenger </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripIdPassengersUserIdDeleteCall(Integer tripId, Integer userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trips/{trip_id}/passengers/{user_id}"
            .replaceAll("\\{" + "trip_id" + "\\}", localVarApiClient.escapeString(tripId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsTripIdPassengersUserIdDeleteValidateBeforeCall(Integer tripId, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tripId' is set
        if (tripId == null) {
            throw new ApiException("Missing the required parameter 'tripId' when calling tripsTripIdPassengersUserIdDelete(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling tripsTripIdPassengersUserIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdDeleteCall(tripId, userId, _callback);
        return localVarCall;

    }

    /**
     * Remove user from passengers of a trip
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is not a passenger </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Used removed from passenger </td><td>  -  </td></tr>
     </table>
     */
    public void tripsTripIdPassengersUserIdDelete(Integer tripId, Integer userId) throws ApiException {
        tripsTripIdPassengersUserIdDeleteWithHttpInfo(tripId, userId);
    }

    /**
     * Remove user from passengers of a trip
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is not a passenger </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Used removed from passenger </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tripsTripIdPassengersUserIdDeleteWithHttpInfo(Integer tripId, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdDeleteValidateBeforeCall(tripId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove user from passengers of a trip (asynchronously)
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is not a passenger </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Used removed from passenger </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripIdPassengersUserIdDeleteAsync(Integer tripId, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdDeleteValidateBeforeCall(tripId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripsTripIdPassengersUserIdGet
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent passenger status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripIdPassengersUserIdGetCall(Integer tripId, Integer userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trips/{trip_id}/passengers/{user_id}"
            .replaceAll("\\{" + "trip_id" + "\\}", localVarApiClient.escapeString(tripId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsTripIdPassengersUserIdGetValidateBeforeCall(Integer tripId, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tripId' is set
        if (tripId == null) {
            throw new ApiException("Missing the required parameter 'tripId' when calling tripsTripIdPassengersUserIdGet(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling tripsTripIdPassengersUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdGetCall(tripId, userId, _callback);
        return localVarCall;

    }

    /**
     * Get passenger status
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent passenger status </td><td>  -  </td></tr>
     </table>
     */
    public String tripsTripIdPassengersUserIdGet(Integer tripId, Integer userId) throws ApiException {
        ApiResponse<String> localVarResp = tripsTripIdPassengersUserIdGetWithHttpInfo(tripId, userId);
        return localVarResp.getData();
    }

    /**
     * Get passenger status
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent passenger status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tripsTripIdPassengersUserIdGetWithHttpInfo(Integer tripId, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdGetValidateBeforeCall(tripId, userId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get passenger status (asynchronously)
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Sent passenger status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripIdPassengersUserIdGetAsync(Integer tripId, Integer userId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdGetValidateBeforeCall(tripId, userId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripsTripIdPassengersUserIdPost
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is already a passenger, or the ride has no available seating left </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> User added as pending passenger </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripIdPassengersUserIdPostCall(Integer tripId, Integer userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trips/{trip_id}/passengers/{user_id}"
            .replaceAll("\\{" + "trip_id" + "\\}", localVarApiClient.escapeString(tripId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsTripIdPassengersUserIdPostValidateBeforeCall(Integer tripId, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tripId' is set
        if (tripId == null) {
            throw new ApiException("Missing the required parameter 'tripId' when calling tripsTripIdPassengersUserIdPost(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling tripsTripIdPassengersUserIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdPostCall(tripId, userId, _callback);
        return localVarCall;

    }

    /**
     * Add user as passenger to a trip with pending status
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is already a passenger, or the ride has no available seating left </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> User added as pending passenger </td><td>  -  </td></tr>
     </table>
     */
    public void tripsTripIdPassengersUserIdPost(Integer tripId, Integer userId) throws ApiException {
        tripsTripIdPassengersUserIdPostWithHttpInfo(tripId, userId);
    }

    /**
     * Add user as passenger to a trip with pending status
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is already a passenger, or the ride has no available seating left </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> User added as pending passenger </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tripsTripIdPassengersUserIdPostWithHttpInfo(Integer tripId, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdPostValidateBeforeCall(tripId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add user as passenger to a trip with pending status (asynchronously)
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is already a passenger, or the ride has no available seating left </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> User added as pending passenger </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripIdPassengersUserIdPostAsync(Integer tripId, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdPostValidateBeforeCall(tripId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripsTripIdPassengersUserIdPut
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param status New status of the passenger (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is not a passenger, or is not in pending status, or status not in accepted value </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Status is updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripIdPassengersUserIdPutCall(Integer tripId, Integer userId, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trips/{trip_id}/passengers/{user_id}"
            .replaceAll("\\{" + "trip_id" + "\\}", localVarApiClient.escapeString(tripId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsTripIdPassengersUserIdPutValidateBeforeCall(Integer tripId, Integer userId, String status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tripId' is set
        if (tripId == null) {
            throw new ApiException("Missing the required parameter 'tripId' when calling tripsTripIdPassengersUserIdPut(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling tripsTripIdPassengersUserIdPut(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling tripsTripIdPassengersUserIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdPutCall(tripId, userId, status, _callback);
        return localVarCall;

    }

    /**
     * Update passenger status
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param status New status of the passenger (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is not a passenger, or is not in pending status, or status not in accepted value </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Status is updated </td><td>  -  </td></tr>
     </table>
     */
    public void tripsTripIdPassengersUserIdPut(Integer tripId, Integer userId, String status) throws ApiException {
        tripsTripIdPassengersUserIdPutWithHttpInfo(tripId, userId, status);
    }

    /**
     * Update passenger status
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param status New status of the passenger (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is not a passenger, or is not in pending status, or status not in accepted value </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Status is updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tripsTripIdPassengersUserIdPutWithHttpInfo(Integer tripId, Integer userId, String status) throws ApiException {
        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdPutValidateBeforeCall(tripId, userId, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update passenger status (asynchronously)
     * 
     * @param tripId ID of the trip (required)
     * @param userId ID of the user (required)
     * @param status New status of the passenger (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> User is not a passenger, or is not in pending status, or status not in accepted value </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing authentification </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not identified as the corresponding user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trip or user not found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Status is updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripIdPassengersUserIdPutAsync(Integer tripId, Integer userId, String status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsTripIdPassengersUserIdPutValidateBeforeCall(tripId, userId, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
